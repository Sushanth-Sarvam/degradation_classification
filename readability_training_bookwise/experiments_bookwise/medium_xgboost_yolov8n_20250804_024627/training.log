2025-08-04 02:46:27,458 - INFO - Loading yolov8n features from embeddings/yolov8n_embeddings_20250804_012817
2025-08-04 02:46:27,460 - INFO - ✅ Features loaded successfully
2025-08-04 02:46:27,460 - INFO - 📊 Train features: (771, 256)
2025-08-04 02:46:27,460 - INFO - 📊 Test features: (387, 256)
2025-08-04 02:46:27,460 - INFO - 📊 Feature dimension: 256
2025-08-04 02:46:27,460 - INFO - 🚀 Starting MEDIUM hyperparameter XGBoost training...
2025-08-04 02:46:27,460 - INFO - 🔧 MEDIUM hyperparameter tuning...
2025-08-04 02:46:27,460 - INFO - 📊 Total parameter combinations: 16
2025-08-04 02:46:27,460 - INFO - 🔄 Cross-validation folds: 3
2025-08-04 02:46:27,461 - INFO - ⏱️  Estimated time: 8.0 - 24.0 minutes
2025-08-04 02:46:27,461 - INFO - 🚀 Starting hyperparameter search...
2025-08-04 02:48:01,103 - INFO - ✅ Hyperparameter search completed!
2025-08-04 02:48:01,208 - INFO - ⏱️  Total training time: 0:01:33.606941
2025-08-04 02:48:01,210 - INFO - 🏆 Best parameters found:
2025-08-04 02:48:01,216 - INFO -    colsample_bytree: 0.8
2025-08-04 02:48:01,217 - INFO -    learning_rate: 0.2
2025-08-04 02:48:01,218 - INFO -    max_depth: 3
2025-08-04 02:48:01,218 - INFO -    n_estimators: 100
2025-08-04 02:48:01,219 - INFO -    reg_alpha: 0
2025-08-04 02:48:01,219 - INFO -    reg_lambda: 1
2025-08-04 02:48:01,219 - INFO -    subsample: 0.8
2025-08-04 02:48:01,220 - INFO - 🏆 Best CV F1 score: 0.4667
2025-08-04 02:48:03,923 - INFO - 🔝 Top parameter combinations:
2025-08-04 02:48:04,040 - INFO -    1. F1: 0.4667 (±0.0996) - {'colsample_bytree': 0.8, 'learning_rate': 0.2, 'max_depth': 3, 'n_estimators': 100, 'reg_alpha': 0, 'reg_lambda': 1, 'subsample': 0.8}
2025-08-04 02:48:04,041 - INFO -    2. F1: 0.4654 (±0.1001) - {'colsample_bytree': 0.8, 'learning_rate': 0.2, 'max_depth': 3, 'n_estimators': 200, 'reg_alpha': 0, 'reg_lambda': 1, 'subsample': 0.8}
2025-08-04 02:48:04,049 - INFO -    3. F1: 0.4637 (±0.1507) - {'colsample_bytree': 0.8, 'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 200, 'reg_alpha': 0, 'reg_lambda': 1, 'subsample': 1.0}
2025-08-04 02:48:04,053 - INFO -    4. F1: 0.4527 (±0.1365) - {'colsample_bytree': 0.8, 'learning_rate': 0.2, 'max_depth': 3, 'n_estimators': 200, 'reg_alpha': 0, 'reg_lambda': 1, 'subsample': 1.0}
2025-08-04 02:48:04,073 - INFO -    5. F1: 0.4513 (±0.1001) - {'colsample_bytree': 0.8, 'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 200, 'reg_alpha': 0, 'reg_lambda': 1, 'subsample': 0.8}
2025-08-04 02:48:04,073 - INFO - 📊 Evaluating best model on training and test sets...
2025-08-04 02:48:04,099 - INFO - 🔍 Evaluating on train set (771 samples)...
2025-08-04 02:48:04,101 - INFO -    Making predictions...
2025-08-04 02:48:04,304 - INFO -    Calculating probabilities...
2025-08-04 02:48:04,423 - INFO -    Computing metrics...
2025-08-04 02:48:05,669 - INFO - 📊 TRAIN RESULTS:
2025-08-04 02:48:05,677 - INFO -    📈 Accuracy:  1.0000
2025-08-04 02:48:05,684 - INFO -    📈 Precision: 1.0000
2025-08-04 02:48:05,686 - INFO -    📈 Recall:    1.0000
2025-08-04 02:48:05,686 - INFO -    📈 F1 Score:  1.0000
2025-08-04 02:48:05,687 - INFO -    📈 ROC AUC:   1.0000
2025-08-04 02:48:05,710 - INFO -    📊 True distribution: {np.float32(0.0): np.int64(425), np.float32(1.0): np.int64(346)}
2025-08-04 02:48:05,710 - INFO -    📊 Pred distribution: {np.int64(0): np.int64(425), np.int64(1): np.int64(346)}
2025-08-04 02:48:05,725 - INFO - 🔍 Evaluating on test set (387 samples)...
2025-08-04 02:48:05,738 - INFO -    Making predictions...
2025-08-04 02:48:05,809 - INFO -    Calculating probabilities...
2025-08-04 02:48:05,880 - INFO -    Computing metrics...
2025-08-04 02:48:06,107 - INFO - 📊 TEST RESULTS:
2025-08-04 02:48:06,108 - INFO -    📈 Accuracy:  0.4522
2025-08-04 02:48:06,109 - INFO -    📈 Precision: 0.4541
2025-08-04 02:48:06,109 - INFO -    📈 Recall:    0.5156
2025-08-04 02:48:06,109 - INFO -    📈 F1 Score:  0.4829
2025-08-04 02:48:06,110 - INFO -    📈 ROC AUC:   0.4854
2025-08-04 02:48:06,110 - INFO -    📊 True distribution: {np.float32(0.0): np.int64(195), np.float32(1.0): np.int64(192)}
2025-08-04 02:48:06,111 - INFO -    📊 Pred distribution: {np.int64(0): np.int64(169), np.int64(1): np.int64(218)}
2025-08-04 02:48:07,643 - INFO - 📄 Performance metrics saved to: experiments/medium_xgboost_yolov8n_20250804_024627/performance_metrics.txt
2025-08-04 02:48:07,644 - INFO - 💾 Model saved to: experiments/medium_xgboost_yolov8n_20250804_024627/best_model.pkl
2025-08-04 02:48:07,646 - INFO - 💾 Results saved to: experiments/medium_xgboost_yolov8n_20250804_024627/results.json
2025-08-04 02:48:07,646 - INFO - 💾 CV results saved to: experiments/medium_xgboost_yolov8n_20250804_024627/cv_results.csv
2025-08-04 02:48:07,647 - INFO - 📊 Creating visualization plots...
2025-08-04 02:48:07,900 - INFO -    📈 Creating feature importance plot...
2025-08-04 02:48:10,980 - INFO -    📈 Creating confusion matrix...
2025-08-04 02:48:11,520 - INFO -    📈 Creating ROC curve...
2025-08-04 02:48:11,943 - INFO -    📈 Creating hyperparameter search visualization...
2025-08-04 02:48:12,059 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2025-08-04 02:48:12,059 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2025-08-04 02:48:12,072 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2025-08-04 02:48:12,074 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2025-08-04 02:48:12,800 - INFO - ✅ All 4 plots created successfully
2025-08-04 02:48:12,800 - INFO - 📁 Plots saved to: experiments/medium_xgboost_yolov8n_20250804_024627/plots

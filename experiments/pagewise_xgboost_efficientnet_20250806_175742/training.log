2025-08-06 17:57:42,292 - INFO - Loading efficientnet features from readability_training/embeddings/efficientnet_embeddings_20250804_012258
2025-08-06 17:57:42,324 - INFO - Original features loaded: Train (771, 1280), Test (387, 1280)
2025-08-06 17:57:42,650 - INFO - Quality.xlsx loaded with 1158 images
2025-08-06 17:57:42,651 - INFO - Images with page-wise labels: 598
2025-08-06 17:57:42,665 - INFO - Labeled images in train split: 476
2025-08-06 17:57:42,665 - INFO - Labeled images in test split: 122
2025-08-06 17:57:42,665 - INFO - ✅ Page-wise features prepared successfully
2025-08-06 17:57:42,666 - INFO - 📊 Train features: (476, 1280)
2025-08-06 17:57:42,666 - INFO - 📊 Test features: (122, 1280)
2025-08-06 17:57:42,666 - INFO - 📊 Train distribution - Readable: 324, Non-readable: 152
2025-08-06 17:57:42,666 - INFO - 📊 Test distribution - Readable: 81, Non-readable: 41
2025-08-06 17:57:42,666 - INFO - 🚀 Starting MEDIUM hyperparameter XGBoost training for PAGE-WISE classification...
2025-08-06 17:57:42,667 - INFO - 🔧 MEDIUM hyperparameter tuning for PAGE-WISE classification...
2025-08-06 17:57:42,667 - INFO - 📊 Total parameter combinations: 16
2025-08-06 17:57:42,667 - INFO - 🔄 Cross-validation folds: 3
2025-08-06 17:57:42,667 - INFO - ⏱️  Estimated time: 8.0 - 24.0 minutes
2025-08-06 17:57:42,667 - INFO - 🚀 Starting hyperparameter search...
2025-08-06 17:59:41,957 - INFO - ✅ Hyperparameter search completed!
2025-08-06 17:59:41,959 - INFO - ⏱️  Total training time: 0:01:59.288446
2025-08-06 17:59:41,959 - INFO - 🏆 Best parameters found:
2025-08-06 17:59:41,959 - INFO -    colsample_bytree: 0.8
2025-08-06 17:59:41,959 - INFO -    learning_rate: 0.2
2025-08-06 17:59:41,960 - INFO -    max_depth: 6
2025-08-06 17:59:41,960 - INFO -    n_estimators: 200
2025-08-06 17:59:41,960 - INFO -    reg_alpha: 0
2025-08-06 17:59:41,960 - INFO -    reg_lambda: 1
2025-08-06 17:59:41,960 - INFO -    subsample: 1.0
2025-08-06 17:59:41,961 - INFO - 🏆 Best CV F1 score: 0.7812
2025-08-06 17:59:41,990 - INFO - 🔝 Top parameter combinations:
2025-08-06 17:59:41,992 - INFO -    1. F1: 0.7812 (±0.0176) - {'colsample_bytree': 0.8, 'learning_rate': 0.2, 'max_depth': 6, 'n_estimators': 200, 'reg_alpha': 0, 'reg_lambda': 1, 'subsample': 1.0}
2025-08-06 17:59:41,993 - INFO -    2. F1: 0.7803 (±0.0167) - {'colsample_bytree': 0.8, 'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 100, 'reg_alpha': 0, 'reg_lambda': 1, 'subsample': 0.8}
2025-08-06 17:59:41,993 - INFO -    3. F1: 0.7780 (±0.0104) - {'colsample_bytree': 0.8, 'learning_rate': 0.2, 'max_depth': 3, 'n_estimators': 100, 'reg_alpha': 0, 'reg_lambda': 1, 'subsample': 1.0}
2025-08-06 17:59:41,994 - INFO -    4. F1: 0.7778 (±0.0133) - {'colsample_bytree': 0.8, 'learning_rate': 0.2, 'max_depth': 6, 'n_estimators': 100, 'reg_alpha': 0, 'reg_lambda': 1, 'subsample': 0.8}
2025-08-06 17:59:41,994 - INFO -    5. F1: 0.7771 (±0.0206) - {'colsample_bytree': 0.8, 'learning_rate': 0.1, 'max_depth': 6, 'n_estimators': 100, 'reg_alpha': 0, 'reg_lambda': 1, 'subsample': 1.0}
2025-08-06 17:59:41,994 - INFO - 📊 Evaluating best model on training and test sets...
2025-08-06 17:59:41,995 - INFO - 🔍 Evaluating on train set (476 samples)...
2025-08-06 17:59:41,995 - INFO -    Making predictions...
2025-08-06 17:59:42,011 - INFO -    Calculating probabilities...
2025-08-06 17:59:42,035 - INFO -    Computing metrics...
2025-08-06 17:59:42,062 - INFO - 📊 TRAIN RESULTS:
2025-08-06 17:59:42,062 - INFO -    📈 Accuracy:  0.9979
2025-08-06 17:59:42,063 - INFO -    📈 Precision: 0.9969
2025-08-06 17:59:42,063 - INFO -    📈 Recall:    1.0000
2025-08-06 17:59:42,063 - INFO -    📈 F1 Score:  0.9985
2025-08-06 17:59:42,063 - INFO -    📈 ROC AUC:   1.0000
2025-08-06 17:59:42,064 - INFO -    📊 True distribution: {np.float64(0.0): np.int64(152), np.float64(1.0): np.int64(324)}
2025-08-06 17:59:42,064 - INFO -    📊 Pred distribution: {np.int64(0): np.int64(151), np.int64(1): np.int64(325)}
2025-08-06 17:59:42,064 - INFO - 🔍 Evaluating on test set (122 samples)...
2025-08-06 17:59:42,064 - INFO -    Making predictions...
2025-08-06 17:59:42,076 - INFO -    Calculating probabilities...
2025-08-06 17:59:42,088 - INFO -    Computing metrics...
2025-08-06 17:59:42,110 - INFO - 📊 TEST RESULTS:
2025-08-06 17:59:42,111 - INFO -    📈 Accuracy:  0.6557
2025-08-06 17:59:42,111 - INFO -    📈 Precision: 0.6639
2025-08-06 17:59:42,111 - INFO -    📈 Recall:    0.9753
2025-08-06 17:59:42,111 - INFO -    📈 F1 Score:  0.7900
2025-08-06 17:59:42,111 - INFO -    📈 ROC AUC:   0.5926
2025-08-06 17:59:42,111 - INFO -    📊 True distribution: {np.float64(0.0): np.int64(41), np.float64(1.0): np.int64(81)}
2025-08-06 17:59:42,111 - INFO -    📊 Pred distribution: {np.int64(0): np.int64(3), np.int64(1): np.int64(119)}
2025-08-06 17:59:42,151 - INFO - 📄 Performance metrics saved to: experiments/pagewise_xgboost_efficientnet_20250806_175742/performance_metrics.txt
2025-08-06 17:59:42,152 - INFO - 💾 Model saved to: experiments/pagewise_xgboost_efficientnet_20250806_175742/best_model.pkl
2025-08-06 17:59:42,152 - INFO - 💾 Results saved to: experiments/pagewise_xgboost_efficientnet_20250806_175742/results.json
2025-08-06 17:59:42,152 - INFO - 💾 CV results saved to: experiments/pagewise_xgboost_efficientnet_20250806_175742/cv_results.csv
2025-08-06 17:59:42,152 - INFO - 📊 Creating visualization plots...
2025-08-06 17:59:42,157 - INFO -    📈 Creating feature importance plot...
2025-08-06 17:59:43,476 - INFO -    📈 Creating confusion matrix...
2025-08-06 17:59:44,210 - INFO -    📈 Creating ROC curve...
2025-08-06 17:59:44,955 - INFO -    📈 Creating hyperparameter search visualization...
2025-08-06 17:59:45,074 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2025-08-06 17:59:45,076 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2025-08-06 17:59:45,095 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2025-08-06 17:59:45,096 - INFO - Using categorical units to plot a list of strings that are all parsable as floats or dates. If these strings should be plotted as numbers, cast to the appropriate data type before plotting.
2025-08-06 17:59:46,902 - INFO - ✅ All 4 plots created successfully
2025-08-06 17:59:46,902 - INFO - 📁 Plots saved to: experiments/pagewise_xgboost_efficientnet_20250806_175742/plots
